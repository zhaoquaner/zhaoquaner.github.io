<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>1-Spring简述</title>
    <link href="/2022/05/10/Spring/1-Spring%E7%AE%80%E8%BF%B0/"/>
    <url>/2022/05/10/Spring/1-Spring%E7%AE%80%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-Spring简述"><a href="#1-Spring简述" class="headerlink" title="1-Spring简述"></a>1-Spring简述</h1><p>Spring全家桶有很多东西，包括Spring Boot、Spring Cloud、Spring MVC等等。Spring Framework是最基本的Spring 框架。</p><p>Spring帮助开发人员创建对象、管理对象之间的关系。spring的核心技术IOC、AOP，能实现模块之间，类之间的解耦合。</p><p>简单来说，IOC解决的是 对象管理和对象依赖的问题。</p><p>AOP解决的是 非业务代码抽取的问题。</p><p>Spring分为六大模块：</p><ul><li>Spring Core：核心功能，IOC容器，解决对象创建和依赖关系</li><li>Spring Web：Spring对web模块的支持<ul><li>可以和struts整合，让struts的action创建交给spring</li><li>spring mvc模式</li></ul></li><li>Spring DAO：Spring对JDBC操作对的支持</li><li>Spring ORM：spring对ORM的支持<ul><li>既可以和Hibernate整合</li><li>也可以使用spring的Hibernate操作的封装</li></ul></li><li>Spring AOP：切面编程</li><li>SpringEE：spring对JavaEE其他模块的支持</li></ul>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>后端</tag>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10-Spring常用注解</title>
    <link href="/2022/05/10/Spring/10-Spring%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
    <url>/2022/05/10/Spring/10-Spring%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="10-Spring常用注解"><a href="#10-Spring常用注解" class="headerlink" title="10-Spring常用注解"></a>10-Spring常用注解</h1><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h2><p>位置：一般用在类上</p><p>作用：表示该类作为一个配置类，配置一些内容</p><h2 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h2><p>位置：一般用在方法上，<strong>并且该方法所在类是配置类，即被@Configuration注解的类</strong></p><p>作用：表示把该方法返回的对象交给Spring容器管理</p><h2 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h2><p>位置：用在类上</p><p>作用：标注业务层组件</p><h2 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h2><p>位置：用在类上</p><p>作用：标注控制层组件</p><h2 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h2><p>位置：用在类上</p><p>作用：标注数据访问层组件，即DAO组件</p><h2 id="Compinent"><a href="#Compinent" class="headerlink" title="@Compinent"></a>@Compinent</h2><p>位置：用在类上</p><p>作用：泛指组件，当组件不好归类，就用该注解进行标注</p><h2 id="Primary"><a href="#Primary" class="headerlink" title="@Primary"></a>@Primary</h2><p>位置：用在类上</p><p>作用：当自动装配出现多个Bean候选者时，被注解@Primary的Bean将作为首选项。</p><h2 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h2><p>位置：用在变量上</p><p>作用：默认按类型装配，当出现多个Bean，则再按名称，如还是有多个Bean，并且没有@Primary，那么就会出现错误</p><h2 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h2><p>位置：用在变量上</p><p>作用：默认按名称装配</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>后端</tag>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2-IOC</title>
    <link href="/2022/05/10/Spring/2-IOC/"/>
    <url>/2022/05/10/Spring/2-IOC/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="2-IOC"><a href="#2-IOC" class="headerlink" title="2-IOC"></a>2-IOC</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>​        控制反转(IOC)，是一种概念，一种思想。指将传统上由程序代码直接操纵的对象的调用权交给容器，通过容器来实现对象的装配和管理。控制反转指的就是 对对象控制权的转移，从程序代码本身反转到了外部容器。通过容器实现对象的创建、属性赋值、依赖的管理。</p><p>IOC是一种思想，它的实现方法有很多，比较流行的是依赖注入(Dependency Injection) ，也叫DI，应用广泛。</p><p>如何理解IOC(截取知乎上一篇文章的核心部分):</p><blockquote><p>ioc的思想最核⼼的地⽅在于，资源不由使⽤资源的双⽅管理，⽽由不使⽤资源的第三⽅管理，这<br>可以带来很多好处。第⼀，资源集中管理，实现资源的可配置和易管理。第⼆，降低了使⽤资源<br>双⽅的依赖程度，也就是我们说的耦合度。<br>也就是说，甲⽅要达成某种⽬的不需要直接依赖⼄⽅，它只需要达到的⽬的告诉第三⽅机构就可<br>以了，⽐如甲⽅需要⼀双袜⼦，⽽⼄⽅它卖⼀双袜⼦，它要把袜⼦卖出去，并不需要⾃⼰去直接<br>找到⼀个卖家来完成袜⼦的卖出。它也只需要找第三⽅，告诉别⼈我要卖⼀双袜⼦。这下好了，<br>甲⼄双⽅进⾏交易活动，都不需要⾃⼰直接去找卖家，相当于程序内部开放接⼝，卖家由第三⽅<br>作为参数传⼊。甲⼄互相不依赖，⽽且只有在进⾏交易活动的时候，甲才和⼄产⽣联系。反之亦<br>然。这样做什么好处么呢，甲⼄可以在对⽅不真实存在的情况下独⽴存在，⽽且保证不交易时候<br>⽆联系，想交易的时候可以很容易的产⽣联系。甲⼄交易活动不需要双⽅⻅⾯，避免了双⽅的互<br>不信任造成交易失败的问题。因为交易由第三⽅来负责联系，⽽且甲⼄都认为第三⽅可靠。那么<br>交易就能很可靠很灵活的产⽣和进⾏了。这就是ioc的核⼼思想。⽣活中这种例⼦⽐⽐皆是，⽀付<br>宝在整个淘宝体系⾥就是庞⼤的ioc容器，交易双⽅之外的第三⽅，提供可靠性可依赖可灵活变更<br>交易⽅的资源管理中⼼。另外⼈事代理也是，雇佣机构和个⼈之外的第三⽅。<br>=update=<br>在以上的描述中，诞⽣了两个专业词汇，依赖注⼊和控制反转所谓的依赖注⼊，则是，甲⽅开放<br>接⼝，在它需要的时候，能够讲⼄⽅传递进来(注⼊)所谓的控制反转，甲⼄双⽅不相互依赖，交易<br>活动的进⾏不依赖于甲⼄任何⼀⽅，整个活动的进⾏由第三⽅负责管理。</p></blockquote><h3 id="什么是依赖"><a href="#什么是依赖" class="headerlink" title="什么是依赖"></a>什么是依赖</h3><p>classA中有classB的实例，那么在classA中调用classB的方法完成实例，那么classA对classB有依赖。</p><p>依赖注入：是指，在程序运行过程中，若需要调用另一个对象协助时，无须再代码中创建，而是依赖于外部容器，由外部容器创建后传递给程序。</p><p>Spring的依赖注入对调用者和被调用者几乎没有任何要求，完全支持对象之间依赖关系的管理。</p><p>IOC的另一个体现是在使用Servlet时，没有创建过Servlet对象，而是由Tomcat来创建，所以也叫Tomcat容器。</p><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p>在spring中，把Java对象叫做bean。</p><p>在使用maven管理项目时，在main目录下，创建resources目录，在该目录下创建spring的配置文件beans.xml。</p><p>在这个配置文件中，配置spring需要创建的类对象。格式为：</p><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>声明bean，就代表告诉spring创建某个类的对象，id是该对象的自定义名称，是唯一值，spring通过id找到这个对象；</p><p>一个bean标签声明一个对象。</p><p><strong>这种设置下，spring创建对象调用的是类的无参数构造器，所以如果要想让spring自动创建某个类的对象，该类必须有无参数构造器。后面会学到，添加标签和属性，spring可以调用有参构造器。</strong></p><p>class是对应类的全限定名称(不能是接口，只能是类)。</p><p>在spring框架中，有一个map，存放创建的对象，key和value分别是id和创建的对象。</p><p>例如有一个org.example.Test类，要让Spring去自动创建它，在配置文件beans.xml中应这样写：</p><p><code>&lt;bean id=&quot;test&quot; class=&quot;org.example.Test&quot; /&gt;</code></p><h2 id="创建容器对象ApplicationContext"><a href="#创建容器对象ApplicationContext" class="headerlink" title="创建容器对象ApplicationContext"></a>创建容器对象ApplicationContext</h2><p>spring帮我们创建好对象后，我们要使用ApplicationContext来获取对象，进行使用，它就表示spring容器。ApplicationContext是一个接口，最常用的实现类是ClassPathXmlApplicationContext，创建该类对象时有一个参数，是配置文件的路径。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;beans.xml&quot;</span>;<br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(config);<br></code></pre></td></tr></table></figure><p><img src="https://crayon-1302863897.cos.ap-beijing.myqcloud.com/image/image-20201024172618382.png" alt="image-20201024172618382" style="zoom:50%;" /></p><p>这是例子项目的目录结构，beans.xml在resources目录下，在编译后，会在classes目录下，也就是类的根目录，所以变量config直接写”beans.xml”即可。</p><p>在创建ApplicationContext时，读取beans.xml文件时当读取到一个bean标签，就会创建一个对象。</p><p>然后使用该对象的getBean()方法来获取要使用的对象。该方法有多种重载形式，可以使用对象id作为参数来获取对象。并进行类型强制转换。</p><p>这种方法在后面慢慢就不会使用，但刚开始需要这样来获取。</p><h2 id="使用容器对象获取对象信息"><a href="#使用容器对象获取对象信息" class="headerlink" title="使用容器对象获取对象信息"></a>使用容器对象获取对象信息</h2><p>可以使用ApplicationContext的方法来获取对象信息</p><h3 id="获取创建的对象数量"><a href="#获取创建的对象数量" class="headerlink" title="获取创建的对象数量"></a>获取创建的对象数量</h3><p>使用getBeanDefinitionCount()方法来获取，返回值是int类型</p><h3 id="获取创建对象的名称-ID"><a href="#获取创建对象的名称-ID" class="headerlink" title="获取创建对象的名称(ID)"></a>获取创建对象的名称(ID)</h3><p>使用getBeanDefinitionNames()来获取，返回值是String数组</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>后端</tag>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4-配置文件</title>
    <link href="/2022/05/10/Spring/4-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <url>/2022/05/10/Spring/4-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="4-配置文件"><a href="#4-配置文件" class="headerlink" title="4-配置文件"></a>4-配置文件</h1><p>在实际项目开发过程中，常使用多个配置文件。</p><p>多个配置文件的优势：</p><ul><li>每个文件的大小比单独一个文件要小很多，读取保存快，效率高</li><li>避免多人协作，竞争带来的冲突。</li></ul><p>配置文件分类有也很多种方式：</p><ul><li><p>按模块分类，一个模块一个配置文件</p></li><li><p>按业务分类，例如数据访问层一个配置文件，服务层一个配置文件</p><p>  . . .</p></li></ul><h2 id="包含关系的多配置文件"><a href="#包含关系的多配置文件" class="headerlink" title="包含关系的多配置文件"></a>包含关系的多配置文件</h2><p>当有多个配置文件时，可以使用一个总的配置文件来把这些配置文件都包含起来。</p><p>例如有student.xml和teacher.xml配置文件，那么可以有一个total.xml文件来把前两个配置文件包含在一起</p><p>语法为：</p><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;其他配置文件的路径&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>关键词：”classpath:” 表示类路径，在spring的配置文件中要指定其他文件位置，需要使用classpath，告诉spring去哪里加载读取文件。</p><p>主配置文件中一般不包含bean，它只是用来包含其他配置文件的。</p><p>上面的例子可以这样写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;classpath:student.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">import</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;classpath:teacher.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">import</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当然实际上，其他配置文件会在其他目录里，这里只是演示。</p><p>在使用ClassPathApplicationContext读取这个总配置文件时，就会将包含的两个配置文件一块读取。</p><h3 id="使用通配符"><a href="#使用通配符" class="headerlink" title="使用通配符"></a>使用通配符</h3><p>在包含关系的配置文件中，可以使用通配符(*：表示任意字符)</p><p>例如有两个配置文件：spring-student.xml、spring-teacher.xml</p><p>那么在总配置文件中引入是可以这样写：<br><code>&lt;import resource=&quot;classpath:spring-*.xml&quot; /&gt;</code>，这样就可以将两个配置文件都导入</p><p><strong>注意：</strong></p><ul><li>总的配置文件名称不能包含在通配符的范围里面，否则会造成死循环。例如上面例子，总配置文件不能起名叫spring-*.xml</li><li>要使用通配符匹配的所有配置文件要在一个目录里，不同目录没法匹配</li></ul>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>后端</tag>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3-基于XML的DI实现</title>
    <link href="/2022/05/10/Spring/3-%E5%9F%BA%E4%BA%8EXML%E7%9A%84DI%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/05/10/Spring/3-%E5%9F%BA%E4%BA%8EXML%E7%9A%84DI%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="3-基于XML的DI实现"><a href="#3-基于XML的DI实现" class="headerlink" title="3-基于XML的DI实现"></a>3-基于XML的DI实现</h1><p>依赖注入(DI)：表示创建对象后，给对象的属性赋值。</p><p>DI有两种实现方法：</p><ul><li>在spring配置文件中，使用标签和属性完成，叫做基于XML的DI实现。</li><li>使用spring的注解，完成属性赋值，叫做基于注解的DI实现。</li></ul><p>DI的语法分类：</p><ul><li>set注入(设值注入)：spring调用类的set方法，来完成属性赋值</li><li>构造注入：spring调用类的有参数构造器，完成属性赋值。</li></ul><p>先讲基于XML的DI实现。</p><p>创建一个User类：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="set注入-设值注入"><a href="#set注入-设值注入" class="headerlink" title="set注入(设值注入)"></a>set注入(设值注入)</h2><p>先来明确一个概念：简单类型。</p><p>Java 的简单类型包括基本数据类型和String。其他的都是引用数据类型。</p><p>使用XML配置文件进行设值注入的语法格式为：</p><p>上面是简单类型赋值，如果类里面包括引用类型，例如User里包括一个定义类Person，变量值为person，应这样定义：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;person&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.Person&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.User&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;person&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;person&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也就是需要在配置文件中，定义一个Person对象，然后使用ref标签来指向这个对象。这个Person对象也可以在定义在User代码后面。</p><p><strong>注意：</strong></p><ul><li><p><strong>如果要使用设值注入，那么属性必须有对应的set方法。并且spring只是调用对应set方法，至于set方法里面语句，spring不关心。</strong></p></li><li><p><strong>只要类里有set方法，那么就可以正常执行。也就是说，即使没有定义成员变量，只要有set方法就可以执行。</strong></p><p>  例如，User中没有定义email变量，但是有<code>public void setEmail(String email)</code>这个set方法，那么在配置文件中也可以正常去调用，不会报错。</p></li><li><p><strong>赋值发生在调用无参数构造器创建对象之后。</strong></p></li></ul><h3 id="bean一些其他属性"><a href="#bean一些其他属性" class="headerlink" title="bean一些其他属性"></a>bean一些其他属性</h3><ul><li>```xml<br>  <bean id="" class="" ><div class="code-wrapper"><pre><code class="hljs">  &lt;property name=&quot;属性名字&quot; value=&quot;属性的值&quot;&gt;&lt;/property&gt;</code></pre></div>  &lt;/bean&gt;<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">  <br>    **其中bean标签还有一个属性为scope，它指定这个对象是单例还是多例，值分别为singleton/prototype**<br>  <br>    **当使用单例，那么每次ApplicationContext返回的都是同一个对象；如果使用多例，那么每次返回都是不同对象。**<br>  <br>    **并且，当使用单例，对象在创建IOC容器时创建；使用多例，对象在使用时才创建。**<br><br>- lazy-init属性：它只对singleton的对象有效，默认为<span class="hljs-keyword">false</span>。即在IOC容器创建时创建该对象。如果指定为<span class="hljs-keyword">true</span>，那么该对象会在使用它时才创建出来<br><br>- init-<span class="hljs-keyword">method</span>和destory-<span class="hljs-keyword">method</span>：想要在对象创建之后，执行某个方法，指定init-<span class="hljs-keyword">method</span>属性；<br>  <br>    想要在IOC容器销毁后，执行某个方法，指定destory-<span class="hljs-keyword">method</span>属性<br><br>## 构造注入<br><br>构造注入和设值注入语法差别不大。<br><br>语法为：<br><br>```<span class="hljs-type">xml</span><br>&lt;bean id=&quot;&quot; <span class="hljs-keyword">class</span>=&quot;&quot;&gt;<br>    &lt;constructor-arg <span class="hljs-keyword">index</span>=&quot;&quot; <span class="hljs-type">name</span>=&quot;&quot; <span class="hljs-keyword">value</span>=&quot;&quot;&gt;&lt;/constructor-arg&gt;<br>&lt;/bean&gt;<br></code></pre></td></tr></table></figure></li></ul><p>参数解释：</p><ul><li>index：表示构造方法参数的位置，从左到右，从0开始计数</li><li>name：构造函数的形参名</li><li>value：如果是简单数据类型，赋值使用value</li><li>ref：如果是引用数据类型，赋值使用ref</li></ul><p>Index和name属性有一个就可以；两个可以都不写，但是标签的顺序需要和构造方法参数的顺序一致。</p><h2 id="引用类型自动注入（对于引用类型赋值的简化）"><a href="#引用类型自动注入（对于引用类型赋值的简化）" class="headerlink" title="引用类型自动注入（对于引用类型赋值的简化）"></a>引用类型自动注入（对于引用类型赋值的简化）</h2><p>在实际开发中，有大量的引用类型，如果每一个赋值都要用<code>&lt;property-name&gt;</code>标签，name代码会又臭又长。</p><p>引用类型的自动注入就是 spring框架可以根据某些规则自动给引用类型赋值，不再需要手动赋值了。</p><p>最常用的规则是byName、byType。</p><ul><li><p>byName(按名称注入)：<strong>Java类中引用类型变量的名称 和 配置文件中<bean>标签的id名称一样，并且数据类型也一致，那么容器中的bean，就可以赋值给引用类型</strong></p><p>   语法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><br>    简单类型属性赋值<br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>  其中autowire属性，是指 引用类型按照 名称自动注入。</p><p>  例子：</p><p>  定义User：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer id;<br>     <span class="hljs-keyword">private</span> Address address;<span class="hljs-comment">//这个变量名称</span><br><br>     ...<br>&#125;<br></code></pre></td></tr></table></figure><p>  配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.point2.User&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;21&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Jack&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.point2.Address&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--这个id名称--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;addressId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;addressName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;河北&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>  这个例子中，User对象并没有赋值address的语句，但是因为User中定义Address引用类型变量的名称和id=”address”一样，所以会自动赋值给User的address变量。</p><p>  运行过程：spring在读取属性autowire后，知道按名字来注入，会先去User中拿到引用类型的名称address，然后和配置文件中所有bean的id比对，找到id一致的，并且数据类型相同，那么赋值给User的address引用变量。</p></li><li><p>byType(按类型注入)：<strong>Java类引用类型的数据类型和配置文件中bean标签的class属性是同源关系，这样的bean就可以赋值给引用类型</strong></p><p>  同源：</p><ul><li><p>java类中引用类型和bean的class一致</p></li><li><p>java类中引用类型和bean的class是父子类关系</p></li><li><p>java类中引用类型和bean的class是接口和实现类关系</p><p>语法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>&gt;</span><br>  简单类型赋值<br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.point2.User&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;21&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Jack&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Myaddress&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.point2.Address&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;addressId&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;addressName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;河北&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以看出bean的id值并不是address，但是因为是按类型注入，所以也可以实现自动赋值。</p><p><strong>注意：在按类型注入时，bean只能有一个符合条件的，多于一个就会出现错误。</strong></p></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>后端</tag>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5-基于注解的DI实现</title>
    <link href="/2022/05/10/Spring/5-%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84DI%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/05/10/Spring/5-%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84DI%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="5-基于注解的DI实现"><a href="#5-基于注解的DI实现" class="headerlink" title="5-基于注解的DI实现"></a>5-基于注解的DI实现</h1><p>通过注解来配置信息是为了简化IOC容器的配置，注解可以把对象添加到IOC容器中、处理对象依赖关系。</p><h2 id="使用注解步骤"><a href="#使用注解步骤" class="headerlink" title="使用注解步骤"></a>使用注解步骤</h2><ol><li>加入maven的依赖spring-context，加入的同时，也加入了spring-aop的依赖，使用注解必须要使用spring-aop依赖</li><li>在类中加入spring的依赖</li><li>在spring配置文件中，加入一个组件扫描器的标签，来说明注解在项目中的位置</li></ol><h2 id="加入组件扫描器"><a href="#加入组件扫描器" class="headerlink" title="加入组件扫描器"></a>加入组件扫描器</h2><p>在配置文件中加入组件扫描器的标签 <code>&lt;context:component-scan base-package=&quot;&quot; /&gt;</code></p><p>属性：base-package，指定注解要扫描的包名</p><p>扫描器的工作方式：spring会扫描遍历base-package指定的包，递归的找到所有类中的注解，按照注解的功能创建对象或者给属性赋值。</p><p>context是指对应的命名空间，<code>xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</code>。</p><h3 id="指定多个包的方式"><a href="#指定多个包的方式" class="headerlink" title="指定多个包的方式"></a>指定多个包的方式</h3><p>有三种方式</p><ol><li>使用多个<code>&lt;context:component-scan base-package=&quot;&quot; /&gt;</code>语句，指定不同的包</li><li>使用分隔符; 或 ,分割多个包名，例如<code>&lt;context:component-scan base-package=&quot;org.example.package1;org.example.package2&quot;</code></li><li>指定需要扫描的所有包的父包，例如package1和package2的父包是org.example，那么就直接指定这个包即可</li></ol><h2 id="主要学习的注解"><a href="#主要学习的注解" class="headerlink" title="主要学习的注解"></a>主要学习的注解</h2><p>有以下几个：</p><ul><li>@Component</li><li>@Respotory</li><li>@Service</li><li>@Controller</li><li>@Value</li><li>@Autowired</li><li>@Resource</li></ul><h3 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h3><p>这个注解用来创建对象，等同于标签bean，</p><p>属性：value，表示这个对象的名称，是唯一的。也可以省略value，直接写对象名称，必须加引号</p><p>如果不写这个属性，那么spring会使用默认的对象名称：类名的首字母小写，例如类名为Student，那么默认名称为student</p><p>位置：在类的上面</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.point1;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component(value = &quot;myStudent&quot;)</span> <span class="hljs-comment">//指定对象的唯一名称</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="与-Component用法类似的三个注解"><a href="#与-Component用法类似的三个注解" class="headerlink" title="与@Component用法类似的三个注解"></a>与@Component用法类似的三个注解</h3><ol><li>@Repository(用在持久层类上面)：放在DAO的实现类上面，表示创建DAO对象，DAO对象可以访问数据库</li><li>@Service(用在业务层类上面)：放在service的实现类上面，创建service对象，该对象是做业务处理，有事务等功能</li><li>@Controller(用在控制器上面)：放在控制器类上面，创建控制器对象，能够接受用户提交的参数，显示请求处理结果，如Servet</li></ol><p>这三个注解和@Comonent的用法大致相同。都可以创建对象，但是这三个注解还有额外的功能。</p><p>@Repository，@Service，@Controller是用来给项目对象分层的，它们可以赋予对象不同的角色。是比@Component的功能丰富的。</p><p>当一个类不是以上三个类型，或者不知道是不是这三个类，就可以使用@Component</p><h3 id="Value-简单类型的赋值"><a href="#Value-简单类型的赋值" class="headerlink" title="@Value(简单类型的赋值)"></a>@Value(简单类型的赋值)</h3><p>用来给简单类型的属性赋值</p><p>属性：value，String类型，表示简单类型的属性值。可不写value，直接写属性值。必须加引号</p><p>位置： </p><ol><li>在属性定义上面，不需要set方法，推荐使用这种</li><li>在set方法上面</li></ol><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;Jack&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@Value(&quot;21&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然也可以使用在set方法上，用的很少，不再举例了。</p><h3 id="引用类型的赋值"><a href="#引用类型的赋值" class="headerlink" title="引用类型的赋值"></a>引用类型的赋值</h3><p>两个注解@Autowired和@Resource都可以给引用类型赋值。</p><h4 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h4><p>实现引用类型的赋值，使用的是自动注入原理。支持byName、byType</p><p>@Autowired默认使用的是byType自动注入。</p><p>属性：required，布尔类型，默认为true</p><p>​            当required=ture：表示如果引用类型赋值失败，程序报错，并终止执行</p><p>​            当required=false：表示如果引用类型赋值失败，程序正常运行，引用类型为null</p><p><strong>推荐使用true。</strong></p><p>位置：</p><ol><li>在属性定义上面，无需set方法，推荐使用这个</li><li>在set方法上面，很少使用</li></ol><p>例子：</p><p>定义引用类型School：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;mySchool&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">School</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;清华大学&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@Value(&quot;北京海淀区&quot;)</span><br>    <span class="hljs-keyword">private</span> String address;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;School&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, address=&#x27;&quot;</span> + address + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Student的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;Jack&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@Value(&quot;21&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-meta">@Autowired</span> <span class="hljs-comment">//使用Autowired来进行引用类型注入</span><br>    <span class="hljs-keyword">private</span> School school;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, school=&quot;</span> + school +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="使用byName方式"><a href="#使用byName方式" class="headerlink" title="使用byName方式"></a>使用byName方式</h5><p>如果要使用byName方式，那么还需要在属性上面加入@Qualifier(value=”bean的id”)：表示使用指定名称的bean完成赋值</p><p>位置</p><p>在上面代码@Autowired的上面或者下面加入<code>@Qualifier(value=&quot;mySchool&quot;)</code>，就可以实现byName方式赋值</p><h4 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h4><p>来自jdk的注解，spring框架提供了对这个注解的功能支持，可以使用它给引用类型赋值</p><p>使用的也是自动注入原理，支持byName、byType，默认使用byName</p><p>属性：name：当使用byName方法时，指定bean的id，<strong>name不能省略</strong>；使用byType方法，不需要这个属性</p><p>位置：</p><ol><li>在属性定义上面，无需set方法，推荐</li><li>在set方法上面</li></ol><p><strong>注意：</strong></p><ul><li><p><strong>如果没有指定name属性，会使用byType；如果指定了name属性，那么使用byName，如果找不到，会报错</strong></p></li><li><p><strong>这个注解在javax包，也就是java的拓展包里，在java 11以后，jdk不再包括javax，所以需要在pom.xml中手动导入。</strong></p></li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;Jack&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@Value(&quot;21&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> School school;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, school=&quot;</span> + school +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，@Resource没有使用name属性，但是程序可以运行成功，就是因为byName失败后，自动使用byType赋值。</p><p>​    </p><h2 id="配置文件和注解两种方式"><a href="#配置文件和注解两种方式" class="headerlink" title="配置文件和注解两种方式"></a>配置文件和注解两种方式</h2><p>这两种方式都可以使用，但是更多的是使用注解。注解为主，配置文件为辅。</p><p>但是如果修改较多的话，那么就可以使用配置文件。</p><p>如果不需要怎么改变修改的，就可以使用注解。</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>后端</tag>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6-动态代理AOP</title>
    <link href="/2022/05/10/Spring/6-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86AOP/"/>
    <url>/2022/05/10/Spring/6-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86AOP/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="6-动态代理AOP"><a href="#6-动态代理AOP" class="headerlink" title="6-动态代理AOP"></a>6-动态代理AOP</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​        AOP(Aspect Orient Programming)，面向切面编程，是一种可以通过运行期间动态代理实现程序功能的统一维护的一种技术。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重写性，同时提高了开发效率。</p><p>​        具体来说，面向切面编程就是将交叉业务逻辑封装成切面，利用AOP容器的功能将切面植入到主业务逻辑中，交叉业务逻辑是指，通用的、与主业务逻辑无关的代码，例如日志，缓存，安全检查等。</p><p>​        AOP底层，采用的就是动态代理模式，采用了两种代理：jdk的动态代理，和CGLIB的动态代理。</p><p>​        AOP实际就是动态代理的规范化，把动态代理的实现步骤、方式定义好，开发人员使用统一的方式实现动态代理。</p><h3 id="jdk动态代理"><a href="#jdk动态代理" class="headerlink" title="jdk动态代理"></a>jdk动态代理</h3><p>​        使用jdk的Proxy、Method和InvocationHandler创建代理对象，<strong>jdk动态代理要求目标类必须实现接口。</strong></p><h3 id="CGLIB动态代理"><a href="#CGLIB动态代理" class="headerlink" title="CGLIB动态代理"></a>CGLIB动态代理</h3><p>​        是第三方的工具库，创建代理对象，原理是继承。<strong>通过继承目标类，来创建子类，子类就是代理对象。</strong>这种方式要求目标类不能是final，方法也不能是final。</p><h2 id="切面"><a href="#切面" class="headerlink" title="切面"></a>切面</h2><h3 id="一些术语"><a href="#一些术语" class="headerlink" title="一些术语"></a>一些术语</h3><ol><li><strong>Aspect：切面，表示增强的功能。一般是一个类，也叫作切面类。完成一个非业务功能。常见有日志，事务，权限验证。</strong></li><li>JoinPoint：连接点，连接业务方法和切面的位置，就是目标类的业务方法。</li><li><strong>Pointcut：切入点，指多个连接点方法的集合，多个方法。</strong><ul><li><strong>执行目标对象方法，动态的植入切面代码</strong></li><li><strong>通过切入点表达式，指定拦截哪些类的哪些方法，给指定的类在运行的时候植入切面类代码</strong></li></ul></li><li><strong>切入点表达式：指定哪些类的哪些方法被拦截，即被植入切面类代码</strong></li><li>目标对象：给哪个类增加功能，那么这个类就是目标对象</li><li>Advice：通知，通知表示切面功能指向的时间，在目标方法之前还是之后。</li></ol><h3 id="切面的三个关键要素"><a href="#切面的三个关键要素" class="headerlink" title="切面的三个关键要素"></a>切面的三个关键要素</h3><ol><li>切面的功能代码，也就是切面能干什么</li><li>切面的执行位置，使用Pointcut来表示，也就是切面代码在哪个位置</li><li>切面的执行时间，使用Advice表示时间，在目标方法之前还是之后。</li></ol><h2 id="AOP的实现"><a href="#AOP的实现" class="headerlink" title="AOP的实现"></a>AOP的实现</h2><p>AOP是动态代理的一个规范化。</p><p>AOP的技术实现框架：</p><ol><li>spring：spring在内部实现了AOP规范，Spring主要在事务处理中使用AOP，在项目开发中很少使用Spring的AOP实现，因为比较笨重。</li><li>AspectJ：一个开源的框架，专门做AOP。Spring框架中集成了aspectj框架，通过spring就可以使用aspectj的功能。</li></ol><p>aspectj框架实现AOP有两种方式：</p><ul><li>使用XML的配置文件</li><li>使用注解，常用。</li></ul><h2 id="AspectJ"><a href="#AspectJ" class="headerlink" title="AspectJ"></a>AspectJ</h2><h3 id="AspectJ中的几个常用类"><a href="#AspectJ中的几个常用类" class="headerlink" title="AspectJ中的几个常用类"></a>AspectJ中的几个常用类</h3><h4 id="JoinPoint接口"><a href="#JoinPoint接口" class="headerlink" title="JoinPoint接口"></a>JoinPoint接口</h4><p>JoinPoint是Aspectj框架的一个类，表示切入点，它包含被执行的方法的一些信息，例如参数，方法修饰符等等。</p><p>在使用通知注解拦截目标方法后，可以在被注解方法签名中加上该参数，来获取被拦截的方法的一些信息。</p><p>常用方法：</p><ul><li><code>Signature getSignature()</code>：获取封装了署名信息的对象，该对象可以获取到目标方法名，所属类的Class等信息</li><li><code>Object[] getArgs()</code>：获取传入目标方法的参数对象</li><li><code>Object getTarget()</code>：获取被代理的对象</li><li><code>Object getThis()</code>：获取代理对象</li></ul><h4 id="ProceedingJoinPoint接口"><a href="#ProceedingJoinPoint接口" class="headerlink" title="ProceedingJoinPoint接口"></a>ProceedingJoinPoint接口</h4><p>该接口是JoinPoint的子接口，只在环绕通知后的方法参数中使用。</p><p>除了上述方法，还有一个proceed的方法，用来执行目标方法。</p><h3 id="aspectj的切入点表达式"><a href="#aspectj的切入点表达式" class="headerlink" title="aspectj的切入点表达式"></a>aspectj的切入点表达式</h3><p>AspectJ定义了专门的表达式用于指定切入点，表达式的原型是：</p><p>​            <code>execution(modifiers-pattern? ret-type-pattern declaring-type-pattern? name-pattern(param-pattern)  throws-pattern?)</code></p><p>​    解释：</p><ul><li>modifiers-pattern：访问权限类型</li><li><strong>ret-type-pattern：返回值类型</strong></li><li>declaring-type-pattern：包名类名</li><li><strong>name-pattern(param-pattern)：方法名(参数类型和参数个数)</strong></li><li>thorws-pattern：抛出异常类型</li></ul><p>​    ？代表可选的部分</p><p>​        加粗代表必须部分</p><p>用中文来表达就是：</p><p><code>execution(访问权限  方法返回值   方法声明(参数) 异常类型)</code></p><p>各部分使用空格分开，在其中可以使用以下符号</p><ul><li>*：0至多个任意字符</li><li>.. ：用在方法参数中，表示任意多个参数；用在包名后，表示当前包及其子包路径</li><li>+：用在类名后，表示当前类及其子类；用在接口后，表示当前接口及其实现类</li></ul><p>例子：</p><ul><li>execution(public <em> </em>(..))：指定切入点为：任意的公共方法</li><li>execution(<em> set</em>(..))：指定切入点为：任意一个以“set”开始的方法</li><li>execution(<em> com.exy.service. </em> . *(..))：指定切入点为com.exy.service包中任意一个类的任意一个方法</li></ul><h3 id="AspectJ通知注解"><a href="#AspectJ通知注解" class="headerlink" title="AspectJ通知注解"></a>AspectJ通知注解</h3><p>所有通知的方法都包含一个JoinPoint类型参数，就是一个切入点表达式。</p><h4 id="Before"><a href="#Before" class="headerlink" title="@Before"></a>@Before</h4><p>​        在目标方法执行之前执行。</p><p><img src="https://crayon-1302863897.cos.ap-beijing.myqcloud.com/image/image-20201129143540935.png" alt="image-20201129143540935" style="zoom:50%;" /></p><h4 id="AfterReturning"><a href="#AfterReturning" class="headerlink" title="@AfterReturning"></a>@AfterReturning</h4><p>在目标方法执行之后执行，所以可以获取到目标方法的返回值。该注解的returning属性就是用于指定接收方法返回值的变量名的。所以被注解为后置通知的方法，除了可以包含JoinPoint参数(<strong>该参数必须放在被注解方法的第一个参数位置</strong>)外，还可以包含用于接收返回值的变量，该变量最好为Object类型。</p><p><img src="https://crayon-1302863897.cos.ap-beijing.myqcloud.com/image/image-20201129143712141.png" alt="image-20201129143712141" style="zoom:50%;" /></p><h4 id="Around"><a href="#Around" class="headerlink" title="@Around"></a>@Around</h4><p>在目标方法之前或之后执行。<strong>被注解为环绕增强方法要有返回值，推荐使用Object类型，</strong>并且方法可以包含一个ProceedingJoinPoint类型的参数，接口ProceedingJoinPoint有一个proceed方法，用于执行目标方法，若目标方法有返回值，那么该方法的返回值就是目标方法返回值，最后环绕增强方法将返回值返回。该增强方法实际是拦截了目标方法的执行。</p><p>环绕通知实际就等同于是jdk的动态代理。</p><p><img src="https://crayon-1302863897.cos.ap-beijing.myqcloud.com/image/image-20201129143222572.png" alt="image-20201129143222572" style="zoom:43%;" /></p><p>因为目标方法是在被注解方法中，调用ProceedingJoinPoint的proceed方法执行的，所以被注解方法可以影响目标方法的执行，例如只在参数等于某个值或不等于某个值时执行。</p><p>例子：</p><p>doAround方法</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">doAround</span><span class="hljs-params">(String name)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;执行doAround方法,name为:&quot;</span> + name);<br>    <span class="hljs-keyword">return</span> name;<br>&#125;<br></code></pre></td></tr></table></figure><p>切面类中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Around(value = &quot;execution(* doAround(..))&quot;)</span><br>   <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">myAround</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>       Object[] args = pjp.getArgs();<br>       <span class="hljs-comment">//判断传入参数是否为空，并且长度是否大于零</span><br>       <span class="hljs-keyword">if</span>(args != <span class="hljs-literal">null</span> &amp;&amp; args.length &gt; <span class="hljs-number">0</span>) &#123;<br>           <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (String) args[<span class="hljs-number">0</span>];<br>           <span class="hljs-comment">//如果等于Jack，那么就执行目标方法，否则额拦截该方法</span><br>           <span class="hljs-keyword">if</span>(name.equals(<span class="hljs-string">&quot;Jack&quot;</span>)) &#123;<br>               pjp.proceed();<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               System.out.println(<span class="hljs-string">&quot;方法被拦截，doAround方法没有执行!&quot;</span>);<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://crayon-1302863897.cos.ap-beijing.myqcloud.com/image/image-20201201094811143.png" alt="image-20201201094811143" style="zoom:33%;" /><img src="https://crayon-1302863897.cos.ap-beijing.myqcloud.com/image/image-20201201094837260.png" alt="image-20201201094837260"></p><p><img src="https://crayon-1302863897.cos.ap-beijing.myqcloud.com/image/image-20201201094857381.png" alt="image-20201201094857381" style="zoom:33%;" /></p><h4 id="AfterThrowing"><a href="#AfterThrowing" class="headerlink" title="@AfterThrowing"></a>@AfterThrowing</h4><p>在目标方法抛出异常后执行，该注解的throwing属性用于指定所发生的的异常类对象，被注解为异常通知的方法可以包含JoinPoint参数和Throwable参数，参数名称为thorwing指定的名称，表示发生异常的对象。</p><p><img src="https://crayon-1302863897.cos.ap-beijing.myqcloud.com/image/image-20201129143432571.png" alt="image-20201129143432571" style="zoom:53%;" /></p><p><img src="https://crayon-1302863897.cos.ap-beijing.myqcloud.com/image/image-20201129143504626.png" alt="image-20201129143504626" style="zoom:50%;" /></p><h4 id="After"><a href="#After" class="headerlink" title="@After"></a>@After</h4><p>无论方法是否抛出异常，该增强方法都会执行。</p><p><img src="https://crayon-1302863897.cos.ap-beijing.myqcloud.com/image/image-20201129143808737.png" alt="image-20201129143808737" style="zoom:50%;" /></p><h3 id="Pointcut"><a href="#Pointcut" class="headerlink" title="Pointcut"></a>Pointcut</h3><p>​        当较多的通知增强方法使用相同的execution切入点表达式时，编写、维护比较麻烦。Aspectj提供了@Pointcut注解，来定义execution切入点表达式。</p><p>​        用法是，将@Pointcut注解在一个方法之上，<strong>以后所有的execution的value属性值都可以使用该方法名作为切入点</strong>，代表的就是@Pointcut定义的切入点，使用@Pointcut注解的方法一般使用private标识，没有实际作用。</p><p>​        实际上使用@Pointcut，就相当于定义了一个变量，可以重复使用。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Pointcut(value = &quot;execution(* *..service.*.*(..))&quot;)</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mypointcut</span><span class="hljs-params">()</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>那么在之后使用切入点表达式就可以直接写<code>@After(value = &quot;mypointcut()&quot;)</code>即可。</p><h2 id="使⽤Spring-AOP开发步骤-Aspectj"><a href="#使⽤Spring-AOP开发步骤-Aspectj" class="headerlink" title="使⽤Spring AOP开发步骤(Aspectj)"></a>使⽤Spring AOP开发步骤(Aspectj)</h2><h3 id="引入AOP相关jar文件"><a href="#引入AOP相关jar文件" class="headerlink" title="引入AOP相关jar文件"></a>引入AOP相关jar文件</h3><ul><li>spring-aop—3.2.5.RELEASE.jar</li><li>aopalliance.jar</li><li>aspectjweaver.jar</li><li>aspectjrt.jar</li></ul><p>其实就是引入spring依赖和aspectj依赖。</p><h3 id="注解⽅式实现AOP编程"><a href="#注解⽅式实现AOP编程" class="headerlink" title="注解⽅式实现AOP编程"></a>注解⽅式实现AOP编程</h3><p>我们之前⼿动的实现AOP编程是需要⾃⼰来编写代理⼯⼚的，现在有了Spring，就不需要我们⾃⼰写代 理⼯⼚了。Spring内部会帮我们创建代理⼯⼚。也就是说，不⽤我们⾃⼰写代理对象了。 因此，我们只要关⼼<strong>切⾯类、切⼊点、编写切⼊表达式指定拦截什么⽅法就可以了！</strong></p><h4 id="创建切面类"><a href="#创建切面类" class="headerlink" title="创建切面类"></a>创建切面类</h4><p>​        其实就是普通类，需要在类上面加入<code>@Aspect</code>注解，来表明它是个切面类。</p><p>​        在类中定义方法，方法就是切面要执行的功能代码，在方法的上面加上aspectj的通知注解，例如<code>@Before</code>或者<code>@After</code>，并且需要指定切入点表达式execution()</p><p>​        其中在切面类中定义方法，该方法有限制：</p><ul><li><p>必须是公共方法，public</p></li><li><p>方法没有返回值，@Around除外</p></li><li><p>方法名称自定义</p></li><li><p>方法可以有参数，也可以没有</p><p>   如果有，那么参数不是自定义的，有几个参数类型可以使用</p><p>  上面已经写了通知注解，除了切入点表达式参数。</p><p>  如果有其他参数，那么被注解的方法也要有相应参数，</p><p>  例如注解<code>@AfterReturning(value = &quot;execution(* *(..))&quot;, returning=&quot;result&quot;)</code>，有一个returning参数，参数名为result，代表目标方法执行后的返回值，那么在被注解的方法签名中也要有参数<code>Object result</code>，参数名必须相同。</p><p>  其他例如异常通知也是这样。</p><p>  被注解方法本身还可以有JoinPoint参数。</p><p>  被注解的方法的参数不需要主动赋值，是aspectj框架自动赋值的。</p></li></ul><h4 id="创建spirng配置文件"><a href="#创建spirng配置文件" class="headerlink" title="创建spirng配置文件"></a>创建spirng配置文件</h4><p>​        在配置文件中声明对象，把对象统一交给容器管理。</p><p>​        声明对象可以用注解，也可以用XML配置。</p><p>​        并且声明aspectj框架中的自动代理生成器标签<code>&lt;aop:aspectj-autoproxy&gt;</code>，这个标签是用来完成代理对象的自动创建功能的。</p><p>​        工作原理是，<code>&lt;aop:aspectj-autoproxy&gt;</code>通过扫描找到@Aspect定义的切面类，再由切面类根据切入点找到目标类的目标方法，再由通知类型找到切入的时间点。</p><p><strong>注意：如果找不到对应的目标方法，那么就不会把代理代码植入到目标类的目标方法中，执行的就是原来代码。</strong></p><h4 id="使用ApplicationContext获取目标对象"><a href="#使用ApplicationContext获取目标对象" class="headerlink" title="使用ApplicationContext获取目标对象"></a>使用ApplicationContext获取目标对象</h4><p>这里的目标对象就是经过aspectj修改后的代理对象，也就是目标类对象。</p><h3 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h3><p>​        使用注解完成容器管理对象。</p><p>先创建接口有一个doSome方法，实现这个接口创建一个目标类，实现doSome方法，然后再创建切面类，实现在执行doSome方法之前，输出当前时间的功能。</p><p>创建接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SomeService</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSome</span><span class="hljs-params">(String name, Integer age)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建接口实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;someService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SomeServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SomeService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSome</span><span class="hljs-params">(String name, Integer age)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;名字为 :&quot;</span> +name + <span class="hljs-string">&quot;, 年龄为：&quot;</span> + age);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建切面类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component(&quot;myAspect&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspect</span> &#123;<br><br>    <span class="hljs-meta">@Before(&quot;execution(public void doSome(String, Integer))&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">myBefore</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;切面功能，输出执行时间：&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Test01</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;applicationContext.xml&quot;</span>;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(config);<br>    <span class="hljs-type">SomeService</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (SomeService) applicationContext.getBean(<span class="hljs-string">&quot;someService&quot;</span>);<br>    proxy.doSome(<span class="hljs-string">&quot;Jack&quot;</span>, <span class="hljs-number">21</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://crayon-1302863897.cos.ap-beijing.myqcloud.com/image/image-20201129145426769.png" alt="image-20201129145426769" style="zoom:50%;" /></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>如果目标类有接口，那么Spring框架默认会使用jdk的动态代理，如果没有接口，那么spring会使用CGLIB代理。</p><p>但是如果希望在有接口的情况下，让Spring使用CGLIB动态代理，就需要在自动代理生成器标签中添加一个属性，<code>proxy-target-class = &quot;true&quot;</code></p><p>即<code>&lt;aop:aspectj-autoproxy  proxy-target-class=&quot;true&quot; /&gt;</code></p><p>就可以让Spring默认使用CGLIB代理。</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>后端</tag>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-Spring集成MyBatis</title>
    <link href="/2022/05/10/Spring/7-Spring%E9%9B%86%E6%88%90MyBatis/"/>
    <url>/2022/05/10/Spring/7-Spring%E9%9B%86%E6%88%90MyBatis/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="7-Spring集成MyBatis"><a href="#7-Spring集成MyBatis" class="headerlink" title="7-Spring集成MyBatis"></a>7-Spring集成MyBatis</h1><h2 id="MyBatis使用步骤"><a href="#MyBatis使用步骤" class="headerlink" title="MyBatis使用步骤"></a>MyBatis使用步骤</h2><p>先来回顾以下MyBatis的使用步骤：</p><ol><li>创建DAO接口</li><li>创建实体类</li><li>创建映射文件</li><li>创建MyBatis主配置文件</li><li>使用SqlSessionFactory创建出SqlSession对象(也在主配置文件中)</li><li>使用SqlSession对象获得dao接口的实现类对象</li><li>执行数据库操作</li></ol><h2 id="集成到Spring后需要的改动"><a href="#集成到Spring后需要的改动" class="headerlink" title="集成到Spring后需要的改动"></a>集成到Spring后需要的改动</h2><p>那么将MyBatis集成到Spring中以后。需要改动的有：</p><ul><li>主配置文件中不再需要数据源的配置，数据源要交给Spring容器来管理，在spring配置文件中配置。</li><li>对mapper文件的注册，应该使用<package />标签，即只需要给出mapper映射文件所在的包。因为mapper文件的名称和DAO接口名称相同。因此使用这种方式的好处是，若有多个映射文件，配置也不需要修改。当然也可以使用原来的<resource />标签</li><li>SqlSessionFactory对象不需要我们来创建，也交给spring容器。</li><li>DAO对象同样交给spring容器。</li></ul><p>因此，需要让spring创建的对象有：</p><ul><li>独立的连接池类对象，不使用MyBatis默认的连接池，而使用阿里的Druid连接池</li><li>SqlSessionFactory对象</li><li>dao对象</li></ul><p><strong>注意：MyBatis集成到Spring后，默认是自动提交事务，不需要写<code>sqlSession.comit();</code>。</strong></p><h2 id="MyBAtis集成到Spring后使用步骤"><a href="#MyBAtis集成到Spring后使用步骤" class="headerlink" title="MyBAtis集成到Spring后使用步骤"></a>MyBAtis集成到Spring后使用步骤</h2><ol><li><p>新建Maven项目</p></li><li><p>加入maven依赖</p><ul><li>spring依赖</li><li>mybatis依赖</li><li>mybatis和spring集成的依赖</li><li>mysql驱动依赖</li><li>spring事务的依赖</li></ul></li><li><p>创建实体类</p></li><li><p>创建dao接口</p></li><li><p>创建mapper文件</p></li><li><p>创建myBatis主配置文件</p></li><li><p>创建Service接口和实现类，实现类成员变量是dao对象</p></li><li><p>创建spring配置文件：声明将mybatis的对象交给spring创建，有：</p><ul><li>数据源</li><li>SqlSessionFactory</li><li>DAO对象</li><li>自定义的Service对象</li></ul></li><li><p>编写测试代码，获取Service对象，通过service调用dao来操作数据库</p></li></ol><h2 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h2><p>首先在spring配置文件applicationContext.xml文件中配置数据源，查询druid的github官网，可以看到通用配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;init&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc_url&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc_user&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc_password&#125;&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;filters&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;stat&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxActive&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;20&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;initialSize&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxWait&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;60000&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minIdle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;timeBetweenEvictionRunsMillis&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;60000&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minEvictableIdleTimeMillis&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;300000&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testWhileIdle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testOnBorrow&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testOnReturn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;poolPreparedStatements&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxOpenPreparedStatements&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;20&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;asyncInit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中属性 <code>init-method=&quot;init&quot;</code>和<code>destory-method=&quot;close&quot;</code>是固定的，这两个方法是在DruidDataSource中写好的。</p><p>在上面的配置中，通常只需要配置url、username、password和maxActive。</p><p>其中maxActive是设置最大有多少连接数。</p><p>Druid会自动根据url识别驱动类名，所以不需要配置driver。</p><h2 id="创建SqlSessionFactory对象"><a href="#创建SqlSessionFactory对象" class="headerlink" title="创建SqlSessionFactory对象"></a>创建SqlSessionFactory对象</h2><p>在spring文件中配置SqlSessionFactory对象。</p><p>之前创建SqlSessionFactory对象，只需要MyBatis配置文件，但是现在把数据源的配置挪到了Spring配置文件中，所以需要两部分，一是Spring配置的数据源，二是mybatis配置文件。</p><p>格式为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:&quot;</span> /&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中，第一个<property>的ref属性是上面配置数据源的id</p><p>第二个<property>标签，是指定mybatis配置文件路径的。<strong>但是需要使用value属性，并且要加上<code>classpath:</code></strong></p><p>在后面写上mybatis的配置文件路径。</p><h2 id="创建DAO接口对象"><a href="#创建DAO接口对象" class="headerlink" title="创建DAO接口对象"></a>创建DAO接口对象</h2><p>将创建dao接口对象也交给Spring容器，在配置文件中进行配置。</p><p>传统创建DAO对象，需要使用SqlSession对象，调用它的getMapper()方法，并把接口的类作为参数传给该方法。</p><p>那么在配置时，同样需要这几项。</p><p>使用MapperScannerConfigurer类：它会在内部多次调用getMapper生成多个dao接口的代理对象</p><p>语法格式为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>该bean不需要id属性。</strong></p><p>其中，第一个<property>标签， 指定的是SqlSessionFactory，值应该是之前创建的SqlSessionFactory的id</p><p>第二个<property>标签，指定的是DAO接口所在的包名，MapperScannerConfigurer会扫描这个包的每个接口，调用getMapper方法创建每个接口的代理对象，也就是DAO对象。</p><p><strong>创建的dao对象的名字是接口名的首字母小写。</strong></p><h2 id="创建Service接口和实现类"><a href="#创建Service接口和实现类" class="headerlink" title="创建Service接口和实现类"></a>创建Service接口和实现类</h2><p>在service包下，创建表的service接口。并在service.impl包下，创建对应实现类。在实现类里定义dao接口对象成员变量，然后不同方法对应数据库的操作。</p><h2 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h2><p>首先创建实体类Student：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-comment">//构造器</span><br>    <span class="hljs-comment">//set和get方法</span><br>&#125;    <br></code></pre></td></tr></table></figure><p>在dao包中创建DAO接口StudentDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentDao</span> &#123;<br><br>    Integer <span class="hljs-title function_">insertStudent</span><span class="hljs-params">(Student student)</span>;<br>    List&lt;Student&gt; <span class="hljs-title function_">selectStudent</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建映射文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.example.dao.StudentDao&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertStudent&quot;</span>&gt;</span><br>        insert into student values (#&#123;id&#125;, #&#123;name&#125;, #&#123;email&#125;, #&#123;age&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectStudent&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.example.domain.Student&quot;</span>&gt;</span><br>        select * from student<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>创建MyBatis主配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--输出日志到控制台--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--设置别名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.example.domain&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--映射文件配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.example.dao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>创建service接口和实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentService</span> &#123;<br><br>    Integer <span class="hljs-title function_">addStudent</span><span class="hljs-params">(Student student)</span>;<br>    List&lt;Student&gt; <span class="hljs-title function_">selectStudents</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">StudentService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> StudentDao studentDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStudentDao</span><span class="hljs-params">(StudentDao studentDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.studentDao = studentDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">addStudent</span><span class="hljs-params">(Student student)</span> &#123;<br>        <span class="hljs-keyword">return</span> studentDao.insertStudent(student);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title function_">selectStudents</span><span class="hljs-params">()</span> &#123;<br>        List&lt;Student&gt; list = studentDao.selectStudent();<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建spring配置文件applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置数据源--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;druid&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;init&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;*******&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxActive&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;20&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!--创建SqlSessionFactory对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;druid&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis.xml&quot;</span> /&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-comment">&lt;!--创建dao接口代理对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;org.example.dao&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.service.impl.StudentServiceImpl&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;studentDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;studentDao&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>编写测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectStudents</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;applicationContext.xml&quot;</span>;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(config);<br>    <span class="hljs-type">StudentService</span> <span class="hljs-variable">studentService</span> <span class="hljs-operator">=</span>(StudentService) applicationContext.getBean(<span class="hljs-string">&quot;studentService&quot;</span>);<br><br>    List&lt;Student&gt; list = studentService.selectStudents();<br>    <span class="hljs-keyword">for</span>(Student stu: list) &#123;<br>        System.out.println(stu);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAddStudent</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;applicationContext.xml&quot;</span>;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(config);<br>    <span class="hljs-type">StudentService</span> <span class="hljs-variable">studentService</span> <span class="hljs-operator">=</span>(StudentService) applicationContext.getBean(<span class="hljs-string">&quot;studentService&quot;</span>);<br>    <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">1012</span>, <span class="hljs-string">&quot;林冲&quot;</span>, <span class="hljs-string">&quot;linchong@qq.com&quot;</span>, <span class="hljs-number">35</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> studentService.addStudent(stu);<br>    System.out.println(<span class="hljs-string">&quot;影响行数为：&quot;</span> + num);<br>&#125;<br></code></pre></td></tr></table></figure><p>执行查询操作，运行结果为：<br><img src="https://crayon-1302863897.cos.ap-beijing.myqcloud.com/image/image-20201204155239728.png" alt="image-20201204155239728" style="zoom:50%;" /></p><p>执行插入操作，运行结果为：</p><p><img src="https://crayon-1302863897.cos.ap-beijing.myqcloud.com/image/image-20201204155317439.png" alt="image-20201204155317439" style="zoom:50%;" /></p><h2 id="使用属性文件"><a href="#使用属性文件" class="headerlink" title="使用属性文件"></a>使用属性文件</h2><p>使用properties属性文件来配置数据库连接信息，在spring配置文件中引用配置文件。</p><p>首先加入在spring配置文件中加入命名空间：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;<br></code></pre></td></tr></table></figure><p>然后使用<code>&lt;context:property-placeholder location=&quot;classpath:&quot; /&gt;</code></p><p>标签来设置属性文件的路径</p><p>最后通过<code>$&#123;属性文件中设置的key&#125;</code>来进行访问</p><p>例子：</p><p>设置路径：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>使用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;druid&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;init&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxActive&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.max&#125;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>后端</tag>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>9-Spring和Web</title>
    <link href="/2022/05/10/Spring/9-Spring%E5%92%8CWeb/"/>
    <url>/2022/05/10/Spring/9-Spring%E5%92%8CWeb/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="9-Spring和Web"><a href="#9-Spring和Web" class="headerlink" title="9-Spring和Web"></a>9-Spring和Web</h1><p>在Web项目中使用Spring框架，首先要在web层(这里指Servlet)获取到Spring容器对象。只要获取到了Spring容器，就可以从该容器中获取到Service对象。</p><p>那么接下来就要思考在哪里创建Spring容器。</p><p>对于一个web应用来说，Spring容器对象只需要一个就可以了。所以很显然不能直接在Servlet中创建Spring容器，因为虽然Servlet是单例多线程，但多个Servlet都需要用到Spring容器，就会创建多个Spring容器。</p><p>我们想到，对于一个web应用，全局作用域对象ServletContext也只有一个，所以可以在创建全局作用域对象的时候创建Spring容器，并把Spring容器对象存入ServletContext中。</p><p>之前学到了全局作用域的监听器接口ServletContextListener，我们可以使用监听器监听全局作用域，当全局作用域创建的时候同时创建Spring容器，并放入全局作用域对象中。</p><p>可以自定义全局作用域监听器接口实现类，也可以使用spring的一个模块spring-web提供的实现类ContextLoaderListener。</p><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><h3 id="加入依赖"><a href="#加入依赖" class="headerlink" title="加入依赖"></a>加入依赖</h3><p>首先加入spring-web依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="在web配置文件web-xml中注册监听器"><a href="#在web配置文件web-xml中注册监听器" class="headerlink" title="在web配置文件web.xml中注册监听器"></a>在web配置文件web.xml中注册监听器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">  <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span><br>    org.springframework.web.context.ContextLoader<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="在web配置文件web-xml文件中指定spring配置文件路径"><a href="#在web配置文件web-xml文件中指定spring配置文件路径" class="headerlink" title="在web配置文件web.xml文件中指定spring配置文件路径"></a>在web配置文件web.xml文件中指定spring配置文件路径</h3><p>使用<context-param>标签来配置，语法格式为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:spring配置文件路径<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br></code></pre></td></tr></table></figure><p>子标签<param-name>的值就是contextConfigLocation，固定不变。<param-value>就是spring配置文件的路径。</p><p>ContextLoaderListener会从ServletContext中获取该参数，然后创建spring容器。</p><p>注意，如果从ServletContext中获取web.xml初始参数，需要使用的方法是<code>getInitParameter(String name)</code>，而不是<code>getAttribute(String name)</code>。</p><p>如果没有使用<context-param>标签指定spring配置文件路径，那么会默认使用WEB-INF/applicationContext.xml这个路径。</p><h4 id="获取Spring容器对象"><a href="#获取Spring容器对象" class="headerlink" title="获取Spring容器对象"></a>获取Spring容器对象</h4><p>获取Spring容器对象有两种方法。</p><p>在之前的例子中，Spring容器对应类时ApplicationContext，在web应用中容器对应类时WebApplicationContext，它是ApplicationContext的子类。</p><h4 id="从ServletContext中获取"><a href="#从ServletContext中获取" class="headerlink" title="从ServletContext中获取"></a>从ServletContext中获取</h4><p>Spring容器对象在ServletContext中存放的key为<code>WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE。</code></p><p>可以通过这个key，调用ServletContext的<code>getAttribute(String name)</code>方法获取WebApplicationContext。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">attr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE&quot;</span>;<br><span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> (WebApplicationContext) <span class="hljs-built_in">this</span>.getServletContext().getAttribute(attr);<br></code></pre></td></tr></table></figure><h4 id="通过WebApplicationContextUtils获取"><a href="#通过WebApplicationContextUtils获取" class="headerlink" title="通过WebApplicationContextUtils获取"></a>通过WebApplicationContextUtils获取</h4><p>WebApplicationContextUtils是一个工具类，它有一个<code>getRequiredWebApplicationContext(ServletContext sc)</code>方法，传入ServletContext参数，返回值就是Spring容器对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">wac</span> <span class="hljs-operator">=</span> WebApplicationContextUtils.getRequiredWebApplicationContext(sc);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>后端</tag>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8-Spring事务</title>
    <link href="/2022/05/10/Spring/8-Spring%E4%BA%8B%E5%8A%A1/"/>
    <url>/2022/05/10/Spring/8-Spring%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="8-Spring事务"><a href="#8-Spring事务" class="headerlink" title="8-Spring事务"></a>8-Spring事务</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>事务最开始是数据库中的概念，在DAO层。数据库中的事务指一组sql语句的集合，我们希望这些语句都成功或者都失败。</p><p>即执行是一致的。当涉及多个表或者多个sql语句的insert，update等，需要保证这些语句都成功，可以使用事务。</p><p>事务有四个特性：</p><ul><li><p>原子性：指事务不可分割，是一个整体</p></li><li><p>一致性：事务中的语句要么都执行，要么都不执行。保持一致</p></li><li><p>隔离性：该事务的执行不影响其他事务的执行</p></li><li><p>持久性：事务执行完以后，永久有效。</p></li></ul><p>但一般情况，需要将事务提升到业务层，即Service层。这样做是为了能够使用事务的特性来管理具体的业务。</p><p>Spring中，通常使用两种方式实现对事务的管理：</p><ul><li>使用Spring的事务注解管理事务</li><li>使用AspectJ的AOP配置管理事务</li></ul><p>事务处理应放在Service的业务方法上，因为业务方法要运行多个sql语句。</p><h2 id="之前数据库事务处理方式的不足"><a href="#之前数据库事务处理方式的不足" class="headerlink" title="之前数据库事务处理方式的不足"></a>之前数据库事务处理方式的不足</h2><ul><li>不同数据库访问技术，处理事务的对象、方法不同，JDBC和MyBatis、Hibernate的事务处理各不相同。</li><li>需要了解不同数据库访问技术使用事务的原理</li><li>掌握多种数据库事务的处理逻辑，什么时候提交事务，什么时候回滚事务</li><li>处理事务的多种方法</li></ul><p>大致总结就是：多种数据库的访问技术，有不同的事务处理的机制、对象和方法。</p><p>那么解决不足的方法就是：使用Spring提供的一种处理事务的统一模型，使用统一步骤、方法完成对不同数据库访问技术的事务处理。</p><h2 id="Spring事务管理"><a href="#Spring事务管理" class="headerlink" title="Spring事务管理"></a>Spring事务管理</h2><p>Spring使用事务管理器来管理事务。事务管理器是一个接口，它有众多的实现类。</p><p>接口：PlatformTransactionManager,定义了事务方法commit、rollback</p><p>实现类：spring把每一种数据库访问技术对应的事务处理类都创建好了。</p><p>DateSourceTransactionManager类：使用JDBC或MyBatis进行数据库操作</p><p>HibernateTransactionManager类：使用Hibernate进行持久化数据时使用</p><p>使用：我们需要告诉spring使用的是哪种数据库访问技术，就是在配置文件中使用<bean>标签声明，创建数据库访问技术对应的类。</p><h3 id="Spring回滚方式"><a href="#Spring回滚方式" class="headerlink" title="Spring回滚方式"></a>Spring回滚方式</h3><p>Spring事务的默认的回滚方式是：发生运行时异常和error时回滚，发生编译异常时提交。但是，对于编译异常，我们可以手动设置回滚方式。</p><p>复习一下错误和异常：</p><p><img src="https://crayon-1302863897.cos.ap-beijing.myqcloud.com/image/image-20201206131613291.png" alt="image-20201206131613291" style="zoom:67%;" /></p><h3 id="事务定义接口"><a href="#事务定义接口" class="headerlink" title="事务定义接口"></a>事务定义接口</h3><p>在创建好<bean>标签后，还需要说明事务的类型。</p><p>事务定义接口TransactionDefinition中定义了事务描述相关的三类常量：事务隔离级别、事务传播行为和事务默认超时时限，及对它们的操作。</p><h4 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h4><p>事务的并发问题：<br><img src="https://crayon-1302863897.cos.ap-beijing.myqcloud.com/image/image-20201206102734602.png" alt="image-20201206102734602" style="zoom:50%;" /></p><p>隔离级别就是用来处理这些问题。</p><p>可取五个值，但实际只有四种情况(这四种情况由上到下隔离级别越来越高)：</p><ul><li>DEFAULT：采用数据库默认事务隔离级别，MySQL默认为REPEATABLE_READ</li><li>READ_UNCOMMITED：读未提交，<strong>一个事务可以读取另一个未提交事务的数据</strong>，未解决任何并发问题</li><li>READ_COMMITED：读已提交，<strong>一个事务要等到另一个事务提交后，才能读取事务。</strong>解决读脏数据、存在不可重复读和幻读</li><li>REPEATABLE_READ：可重复读，<strong>就是在开始读取数据后，不允许修改数据。</strong>解决读脏数据、不可重复读，存在幻读</li><li>SERIALIZABLE：串行化，<strong>即事务串行化顺序执行</strong>，不存在并发问题。但是这种级别效率很低，很耗数据库性能，一般不使用</li></ul><h4 id="事务超时时间"><a href="#事务超时时间" class="headerlink" title="事务超时时间"></a>事务超时时间</h4><p>表示一个方法最长的执行时间，如果方法执行超过了该时间，事务就回滚。单位是秒，整数。默认为-1.</p><p>一般不去管它，使用默认值即可。</p><h4 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h4><p>事务传播行为是指：处在不同事务的方法在相互调用时，执行期间事务的维护情况。例如：A事务中的方法doSome()调用B事务中的方法doOther()，在调用执行期间事务的维护情况，就是事务传播行为。事务传播行为行为是加在方法上的。</p><p>事务传播行为常量都是以PROPAGATION_开头，一共有其中情况</p><ul><li><strong>PROPAGATION_REQUIRED</strong></li><li><strong>PROPAGATION_REQUIRES_NEW</strong></li><li><strong>PROPAGATION_SUPPORTS</strong></li><li>PROPAGATION_MANDATORY</li><li>PROPAGATION_NESTED</li><li>PROPAGATION_NEVER</li><li>PROPAGATION_NOT_SUPPORTED</li></ul><p>其中前三个最为常用，只需掌握前三个即可。</p><h5 id="PROPAGATION-REQUIRED"><a href="#PROPAGATION-REQUIRED" class="headerlink" title="PROPAGATION_REQUIRED"></a><strong>PROPAGATION_REQUIRED</strong></h5><p>指定的方法必须在事务内执行，若当前存在事务，就加入到当前事务；若当前没有事务，则必须创建一个事务，然后加入到新创建的事务中。<strong>总而言之，指定了该传播行为的方法，必须在事务内执行。</strong></p><p>例如：如果该传播行为加在A方法上，在B方法中调用A方法。如果，B方法是在事务内执行的，那么A方法就加入到该事务；如果B方法没有在事务内执行，那么在A方法内会创建一个事务，并在其中执行。</p><h5 id="PROPAGATION-SUPPORTS"><a href="#PROPAGATION-SUPPORTS" class="headerlink" title="PROPAGATION_SUPPORTS"></a><strong>PROPAGATION_SUPPORTS</strong></h5><p>指定的方法支持当前事务，但如果没有事务，也可以以非事务方式执行。也就是说，指定了该传播行为的方法，如果执行时有事务，就在事务内执行，如果没有，同样可以在无事务下运行。</p><h5 id="PROPAGATION-REQUIRES-NEW"><a href="#PROPAGATION-REQUIRES-NEW" class="headerlink" title="PROPAGATION_REQUIRES_NEW"></a><strong>PROPAGATION_REQUIRES_NEW</strong></h5><p>总是新建一个事务，如果当前存在事务，就将该事务挂起，直到新事务执行完毕。</p><h3 id="Spring事务管理使用"><a href="#Spring事务管理使用" class="headerlink" title="Spring事务管理使用"></a>Spring事务管理使用</h3><p>管理事务的是事务管理器接口和它的实现类。</p><p>使用时，有以下几个步骤：</p><ul><li>指定要使用的事务管理器实现类，使用<bean>标签</li><li>指定哪些类的哪些方法需要加入事务的功能</li><li>指定隔离级别、传播行为和超时时间</li></ul><h3 id="使用注解管理事务"><a href="#使用注解管理事务" class="headerlink" title="使用注解管理事务"></a>使用注解管理事务</h3><p>通过使用@Transactional注解方式，该注解是spring框架提供的，可以将事务植入到相应public方法中，实现事务管理。</p><p>@Transactional注解的可选属性如下：</p><ul><li>propagation：用于设置事务传播属性，属性类型为Propagation枚举。默认值为PROPAGATION_REQUIRED</li><li>isolation：用于设置事务隔离级别，属性类型为Isolation枚举。默认值为ISLLATION_DEFAULT</li><li>readOnly：用于设置该方法对于数据库操作是否是只读的。属性为boolean，默认值为false。当查询操作时，可设为true</li><li>timeout：设置本操作与数据库连接的超时时限。单位为秒，类型为int，默认值为-1，即没有时限。</li><li>rollbackFor：指定需要回滚的异常类。即方法抛出这些异常类，就需要回滚。类型为Class[]，默认值为空数组。当只有一个异常类时，可以不使用数组。</li><li><p>rollbackForClassName：指定需要回滚的异常类类名，类型为String[]，默认值为空数组。当只有一个异常类时，可以不使用数组</p></li><li><p>noRollbackFor：指定不需要回滚的异常类，即抛出这些异常时，不需要回滚。类型为Class[]，默认值为空数组。当只有一个异常类时，可以不使用数组。</p></li><li>noRollbackForClassName：指定需要不回滚的异常类类名，类型为String[]，默认值为空数组。当只有一个异常类时，可以不使用数组</li></ul><p><strong>注意：</strong></p><p><strong>@Transactional注解</strong></p><ul><li><p><strong>若用在方法上，只能用在public方法上。对于非public方法，如果加上@Transactional注解，spring不会报错，但不会将指定事务植入到该方法。因为Spring会忽略掉所有非public方法的@Transactional注解。</strong></p></li><li><p><strong>若@Transactional注解用在类上，则表示该类的所有public方法都植入事务。</strong></p></li><li><p>rollbackFor：表示发生指定的异常一定回滚</p><p>  处理机制是：</p><ol><li>spring框架会首先检查抛出的异常是否在rollbackFor的属性值中，如果在，那么不管是什么类型异常，一定回滚</li><li><p>如果不在rollbackFor中，那么spring会判断异常是不是RuntimeException，如果是一定回滚。</p><p><strong>所以，rollbackFor其实只管编译时异常，而不需要管运行时异常。因为抛出运行时异常一定回滚。</strong></p></li></ol></li></ul><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><ol><li><p>在配置文件中声明事务管理器，就是使用<bean>标签声明事务管理器对象，属性dataSource就是创建的数据源</p> <figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSourcce&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><ol><li><p>开启注解驱动，就是告诉spring框架，要使用注解的方式管理事务。</p><p> Spring使用AOP机制，创建@Transactional所在类的代理对象，给方法加入事务的功能。</p><p> 在业务方法执行之前，开启事务，业务方法之后，提交或回滚事务，使用的是AOP的环绕通知。</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p> 注意：这里有四个同名的annotation-driven对应的命名空间，应该选择这个</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;<br></code></pre></td></tr></table></figure></li></ol><ol><li><p>业务层public方法加上事务属性，即在方法上加上@Transactional注解</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">@Transactional(<br>        propagation = Propagation.REQUIRED,<br>        isolation = Isolation.DEFAULT,<br>        readOnly = false,<br>        rollbackFor = &#123;...&#125;<br>)<br></code></pre></td></tr></table></figure><p> 可以这样写，也可以直接写<code>@Transactional</code>，不加括号里的内容。则代表使用默认值，rollbackFor默认抛出运行时异常时回滚事务。</p></li></ol><h2 id="一个完整的例子"><a href="#一个完整的例子" class="headerlink" title="一个完整的例子"></a>一个完整的例子</h2><h3 id="创建两个表"><a href="#创建两个表" class="headerlink" title="创建两个表"></a>创建两个表</h3><p><img src="https://crayon-1302863897.cos.ap-beijing.myqcloud.com/image/image-20201206130953994.png" alt="image-20201206130953994" style="zoom:50%;" /></p><h3 id="加入pom依赖"><a href="#加入pom依赖" class="headerlink" title="加入pom依赖"></a>加入pom依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.annotation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.annotation-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><p>两个实体类，Goods和Sale</p><p>Goods：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Goods</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer amount;<br>    <span class="hljs-keyword">private</span> Float price;<br>    <span class="hljs-comment">//构造器</span><br>    <span class="hljs-comment">//set和get方法</span><br>&#125;    <br></code></pre></td></tr></table></figure><p>Sale：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sale</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> Integer gid;<br>    <span class="hljs-keyword">private</span> Integer nums;<br>    <span class="hljs-comment">//构造器</span><br>    <span class="hljs-comment">//set和get方法</span><br>&#125;    <br></code></pre></td></tr></table></figure><h3 id="创建接口"><a href="#创建接口" class="headerlink" title="创建接口"></a>创建接口</h3><p>同样有两个，操作Goods的GoodsDao接口，操作Sale的SaleDao接口。</p><p>GoodsDao：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">GoodsDao</span> &#123;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">updateGoods</span><span class="hljs-params">(Goods goods)</span>;<br>    Goods <span class="hljs-title function_">selectGoods</span><span class="hljs-params">(Integer goodsId)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>SaleDao：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SaleDao</span> &#123;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">insertSale</span><span class="hljs-params">(Sale sale)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建映射文件"><a href="#创建映射文件" class="headerlink" title="创建映射文件"></a>创建映射文件</h3><p>一个接口一个映射文件</p><p>GoodsDao.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.example.dao.GoodsDao&quot;</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateGoods&quot;</span>&gt;</span><br>        update goods  set amount = amount - #&#123;amount&#125; where id=#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectGoods&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;org.example.domain.Goods&quot;</span>&gt;</span><br>        select * from goods where id = #&#123;goodsId&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>SaleDao.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;org.example.dao.SaleDao&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertSale&quot;</span>&gt;</span><br>        insert into sale(gid, nums) values (#&#123;gid&#125;,#&#123;nums&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h3><p>定义一个库存不足抛出的异常类NotEnoughException：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NotEnoughException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NotEnoughException</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NotEnoughException</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建Service接口和实现类"><a href="#创建Service接口和实现类" class="headerlink" title="创建Service接口和实现类"></a>创建Service接口和实现类</h3><p>接口中只定义一个buy方法，代表买商品，需要操作两个表，在Sale中加入销售记录，更新Goods表中对应商品库存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BuyGoodsService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> goodsId:购买商品的编号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> nums:购买商品的数量</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">(Integer goodsId, Integer nums)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BuyGoodsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BuyGoodsService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> GoodsDao goodsDao;<br>    <span class="hljs-keyword">private</span> SaleDao saleDao;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGoodsDao</span><span class="hljs-params">(GoodsDao goodsDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.goodsDao = goodsDao;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSaleDao</span><span class="hljs-params">(SaleDao saleDao)</span> &#123;<br>        <span class="hljs-built_in">this</span>.saleDao = saleDao;<br>    &#125;<br><br><br>    <span class="hljs-comment">//增加事务注解，也可以直接加上@Transactional，效果一样</span><br>    <span class="hljs-meta">@Transactional(</span><br><span class="hljs-meta">            propagation = Propagation.REQUIRED,</span><br><span class="hljs-meta">            isolation = Isolation.DEFAULT,</span><br><span class="hljs-meta">            readOnly = false,</span><br><span class="hljs-meta">            rollbackFor = &#123;NullPointerException.class, NotEnoughException.class&#125;</span><br><span class="hljs-meta">    )</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//这个方法先插入销售记录，而不是先判断存不存在该商品和商品库存，是为了更明显的显示事务回滚和提交</span><br>    <span class="hljs-comment">//如果没有该注解，那么当抛出异常，销售记录依然存在</span><br>    <span class="hljs-comment">//加上注解，抛出了异常，事务回滚，销售记录会删除</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">(Integer goodsId, Integer nums)</span> &#123;<br>        <span class="hljs-type">Sale</span> <span class="hljs-variable">sale</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sale</span>();<br>        sale.setGid(goodsId);<br>        sale.setNums(nums);<br>        saleDao.insertSale(sale);<br>        <span class="hljs-type">Goods</span> <span class="hljs-variable">goods</span> <span class="hljs-operator">=</span> goodsDao.selectGoods(goodsId);<br>        <span class="hljs-keyword">if</span>(goods == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(<span class="hljs-string">&quot;没有该商品&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(goods.getAmount() &lt; nums) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotEnoughException</span>(<span class="hljs-string">&quot;商品库存不足&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-type">Goods</span> <span class="hljs-variable">buyGoods</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Goods</span>();<br>        buyGoods.setId(goodsId);<br>        buyGoods.setAmount(nums);<br>        goodsDao.updateGoods(buyGoods);<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编写spring配置文件"><a href="#编写spring配置文件" class="headerlink" title="编写spring配置文件"></a>编写spring配置文件</h3><p>省略了mybatis配置文件和属性文件，因为非常简单。</p><p>spring配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:tx</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.alibaba.com/schema/stat http://www.alibaba.com/schema/stat.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;druid&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;init&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxActive&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.maxActive&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;druid&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis.xml&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;org.example.dao&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;buyGoodsService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.example.Service.impl.BuyGoodsServiceImpl&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;goodsDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;goodsDao&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;saleDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;saleDao&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--创建事务管理器对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;druid&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <br><span class="hljs-comment">&lt;!--事务驱动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> /&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h3><p>只测试抛出异常的情况。抛出两个异常，事务都会回滚，情况差不多，只测试一个</p><h4 id="抛出NotEnoughException异常"><a href="#抛出NotEnoughException异常" class="headerlink" title="抛出NotEnoughException异常"></a>抛出NotEnoughException异常</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBuyGoodsService</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;applicationContext.xml&quot;</span>;<br>    <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(config);<br>    <span class="hljs-type">BuyGoodsService</span> <span class="hljs-variable">buyGoodsService</span> <span class="hljs-operator">=</span> (BuyGoodsService) applicationContext.getBean(<span class="hljs-string">&quot;buyGoodsService&quot;</span>);<br>    buyGoodsService.buy(<span class="hljs-number">1001</span>, <span class="hljs-number">10000</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>库存不够，运行结果：</p><p><img src="https://crayon-1302863897.cos.ap-beijing.myqcloud.com/image/image-20201206132520782.png" alt="image-20201206132520782" style="zoom:50%;" /></p><p>同时Sale表和Goods表并没有发生变化：<br><img src="https://crayon-1302863897.cos.ap-beijing.myqcloud.com/image/image-20201206132559732.png" alt="image-20201206132559732" style="zoom:50%;" /></p><p><img src="https://crayon-1302863897.cos.ap-beijing.myqcloud.com/image/image-20201206132607728.png" alt="image-20201206132607728" style="zoom:50%;" /></p><h2 id="使用AspectJ的AOP配置管理事务"><a href="#使用AspectJ的AOP配置管理事务" class="headerlink" title="使用AspectJ的AOP配置管理事务"></a>使用AspectJ的AOP配置管理事务</h2><p>使用注解配置事务代理方式的不足是，当有很多类、很多方法需要配置时，需要大量的配置事务，非常麻烦。</p><p>这时候，使用@AspectJ的AOP来进行配置。在spring配置文件中声明类、方法需要的事务，使用这种方法，业务逻辑和事务配置完全分离。</p><p>适合大型项目。前面那一种适合中小型项目。</p><h3 id="使用步骤-1"><a href="#使用步骤-1" class="headerlink" title="使用步骤"></a>使用步骤</h3><h3 id="声明事务管理器对象"><a href="#声明事务管理器对象" class="headerlink" title="声明事务管理器对象"></a>声明事务管理器对象</h3><p>只要有事务管理，就要声明事务管理器对象，这个和前面是一样的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="配置事务属性"><a href="#配置事务属性" class="headerlink" title="配置事务属性"></a>配置事务属性</h3><p>因为不使用注解来配置事务，就需要在配置文件中进行配置。</p><p>使用<code>&lt;tx:advice&gt;</code>标签，事务通知来进行配置</p><p>语法格式为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">isolation</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">rollback-for</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中</p><p><code>&lt;tx:advice&gt;</code>的id属性用来标识该标签，是一个自定义的唯一值。</p><p>transaction-manager属性是事务管理器的id。</p><p><code>&lt;tx:attributes&gt;</code>中有<code>&lt;tx:method&gt;</code>标签，是用来给具体的方法配置事务，可以有多个，分别给不同方法设置事务属性。</p><p><code>&lt;tx:method&gt;</code>中：</p><ul><li>name：方法名称，值有两种类型<ol><li>完整的方法名称，不带包和类</li><li>使用通配符*表示任意字符</li></ol></li><li>propagation：事务传播行为</li><li>isolation：事务隔离级别</li><li>read-only：是否只读</li><li>no-rollback-for：回滚异常类，值是异常类的全限定类名，多个类用 <code>,</code>分开</li></ul><p>注意：如果使用通配符配置方法名称，应该设置同一类的方法名称有共同的单词，便于通配符设置。</p><h3 id="配置AOP"><a href="#配置AOP" class="headerlink" title="配置AOP"></a>配置AOP</h3><p>配置好不同方法事务属性后，可以发现我们并没有指定是哪个包哪个类的方法。就是说，如果有多个类都有同一个方法，应该使用哪个方法。</p><p>那么下面就需要配置AOP，来指定</p><p>语法格式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution()&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中：<br><strong>标签<code>&lt;aop:pointcut&gt;</code>用来设置切入点，id用来唯一标识该切入点，expression属性就是切入点表达式。用来指定哪些包的哪些类使用事务。</strong></p><p><strong>标签<code>&lt;aop:advisor&gt;</code>用来将前面的事务通知标签<code>&lt;tx:advice&gt;</code>和切入点pointcut标签连接起来。两个属性值都是id值</strong></p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>在之前的例子基础上，修改一下</p><h4 id="配置事务管理器对象"><a href="#配置事务管理器对象" class="headerlink" title="配置事务管理器对象"></a>配置事务管理器对象</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;druid&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="配置事务通知"><a href="#配置事务通知" class="headerlink" title="配置事务通知"></a>配置事务通知</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;advice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;*&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="配置AOP-1"><a href="#配置AOP-1" class="headerlink" title="配置AOP"></a>配置AOP</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;service&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* *.*.service..*.*(..))&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;advice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;service&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><p>切入点表达式代表，service之前有两个包，service之后的<code>..</code>代表service包和子包</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>后端</tag>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo使用</title>
    <link href="/2022/05/09/hexo%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/05/09/hexo%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>在source的_post文件夹中创建markdown文件，并在文章最上方写明文章基本属性。</p><p>基本属性使用yaml格式，冒号和后面文字必须空一格。使用—-可以创建yaml，即三个杠。</p><p>或使用命令<code>hexo n &quot;文件名称&quot;</code></p><p>写完文章后，依次执行以下命令：</p><p><code>hexo clean</code>：清理静态文件</p><p><code>hexo generate / hexo g</code>：重新生成文件</p><p><code>hexo deploy / hexo d</code>：部署</p><p>即可完成文章发布。</p><p>修改文章也类似。</p>]]></content>
    
    
    <categories>
      
      <category>工具使用</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
